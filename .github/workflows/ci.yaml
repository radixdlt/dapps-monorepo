name: Dashboard CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
    - published
  workflow_dispatch:
    inputs:
      ENVIRONMENT_NAME:
        description: 'Environment Name'
        required: true
        default: enkinet
        type: choice
        options:
          - enkinet
          - hammunet
          - nebunet
          - gilganet
          - mardunet

jobs:
  # cancel_running_workflows:
  #   name: Cancel running workflows
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: cancel running workflows
  #       uses: styfle/cancel-workflow-action@0.8.0
  #       with:
  #         access_token: ${{ github.token }}

  # setup-tags:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Docker tags for dashboard
  #       id: dashboard-tags
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: |
  #           eu.gcr.io/dev-container-repo/dashboard
  #         tags: |
  #           type=sha,event=pr
  #           type=sha,event=branch
  #           type=semver,pattern={{version}}
  #     - name: Docker tags for storybook
  #       id: storybook-tags
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: |
  #           eu.gcr.io/dev-container-repo/storybook
  #         tags: |
  #           type=sha,event=pr
  #           type=sha,event=branch
  #           type=semver,pattern={{version}}
  #   outputs:
  #     dashboard-tags: ${{ steps.dashboard-tags.outputs.tags }}
  #     dashboard-labels: ${{ steps.dashboard-tags.outputs.labels }}
  #     dashboard-json: ${{ steps.dashboard-tags.outputs.json }}
  #     storybook-tags: ${{ steps.storybook-tags.outputs.tags }}
  #     storybook-labels: ${{ steps.storybook-tags.outputs.labels }}
  #     storybook-json: ${{ steps.storybook-tags.outputs.json }}

  define_network:
    runs-on: ubuntu-latest
    steps:
      - name: define network name
        run: |
          if [ ${{ github.event_name == 'workflow_dispatch' }} ]; then
            echo "${{ github.event.inputs.ENVIRONMENT_NAME }}"
          else 
            echo "hello world"
          fi
  # elif [ ${{ github.ref }} = "refs/heads/staging" ]; then
  #   echo "::set-output name=STAGE::staging"
  #   echo "::set-output name=SSH_KEY::${{ secrets.STAGING_KEY }}"
  # build:
  #   runs-on: ubuntu-latest
  #   needs:
  #   - define_network
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - uses: ./.github/actions/build
  #       with: 
  #         npm_token: ${{ secrets.NPM_TOKEN }}
  
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - uses: ./.github/actions/build
  #       with: 
  #         npm_token: ${{ secrets.NPM_TOKEN }}
  #     - name: Lint
  #       run:  yarn lint

  # prettier:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - uses: ./.github/actions/build
  #       with: 
  #         npm_token: ${{ secrets.NPM_TOKEN }}
  #     - name: Prettier
  #       run:  yarn prettier

  # sonar:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       with:
  #         projectBaseDir: ./
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # svelte-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - uses: ./.github/actions/build
  #       with: 
  #         npm_token: ${{ secrets.NPM_TOKEN }}
  #     - name: Svelte check
  #       run:  yarn svelte:check

  # unit-tests:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Use Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         always-auth: true
  #         node-version: 16.17.1
  #         cache: yarn
  #     - uses: ./.github/actions/build
  #       with: 
  #         npm_token: ${{ secrets.NPM_TOKEN }}
  #     - name: Unit tests
  #       run:  yarn coverage

  # push-dashboard:
  #   runs-on: ubuntu-latest
  #   needs: [build, setup-tags]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Login to GCR
  #       uses: docker/login-action@v1
  #       with:
  #         registry: eu.gcr.io
  #         username: _json_key
  #         password: ${{ secrets.GCR_EU_DEV_JSON_KEY }}
  #     - name: Docker build and push
  #       uses: docker/build-push-action@v3
  #       with:
  #         file: ./Dockerfile
  #         push: true
  #         context: .
  #         tags: ${{ needs.setup-tags.outputs.dashboard-tags }}
  #         labels: ${{ needs.setup-tags.outputs.dashboard-labels }}
  #         target: "dashboard"
  #         build-args: |
  #            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
  #     - name: Docker Image output
  #       run: |
  #         docker images

  # push-storybook:
  #   runs-on: ubuntu-latest
  #   needs: 
  #   - setup-tags
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Login to GCR
  #       uses: docker/login-action@v1
  #       with:
  #         registry: eu.gcr.io
  #         username: _json_key
  #         password: ${{ secrets.GCR_EU_DEV_JSON_KEY }}
  #     - name: Docker build and push
  #       uses: docker/build-push-action@v3
  #       with:
  #         file: ./Dockerfile
  #         push: true
  #         context: .
  #         tags: ${{ needs.setup-tags.outputs.storybook-tags }}
  #         labels: ${{ needs.setup-tags.outputs.storybook-labels }}
  #         target: "storybook"
  #         build-args: |
  #           NPM_TOKEN=${{ secrets.NPM_TOKEN }}
  #     - name: Docker Image output
  #       run: |
  #         docker images

  # deploy_pull_request:
  #   if: ${{ github.event.pull_request }}
  #   uses: radixdlt/iac-resuable-artifacts/.github/workflows/deploy.yml@v0.7
  #   needs:
  #     - push-dashboard
  #     - push-storybook
  #     - setup-tags
  #   with:
  #     env_name: pr
  #     hierarchical_namespace: dashboard-ci-pr
  #     namespace: dashboard-pr-${{ github.event.number }}
  #     create_subns: true
  #     aws_region: eu-west-2
  #     role_to_assume: "arn:aws:iam::308190735829:role/gh-dashboard-pr-deployer"
  #     eks_cluster: rdx-works-main-dev
  #     helmfile_extra_vars: >-
  #       ci.tag=${{ fromJSON(needs.setup-tags.outputs.dashboard-json).labels['org.opencontainers.image.version'] }},
  #       ci.prNumber=${{ github.event.number }},
  #       ci.environment=pr
  #   secrets:
  #     HELM_GH_USER: ${{ secrets.HELM_GH_USER }}
  #     HELM_GH_PASS: ${{ secrets.HELM_GH_PASS }}

  # deploy_dev:
  #   if: github.ref == 'refs/heads/main'
  #   uses: radixdlt/iac-resuable-artifacts/.github/workflows/deploy.yml@v0.7
  #   needs:
  #     - push-dashboard
  #     - push-storybook
  #     - setup-tags
  #   with:
  #     env_name: dev
  #     namespace:  dashboard-dev
  #     create_subns: false
  #     aws_region: eu-west-2
  #     role_to_assume: "arn:aws:iam::308190735829:role/gh-dashboard-dev-deployer"
  #     eks_cluster: rdx-works-main-dev
  #     helmfile_extra_vars: >-
  #       ci.tag=${{ fromJSON(needs.setup-tags.outputs.dashboard-json).labels['org.opencontainers.image.version'] }},
  #       ci.environment=dev
  #   secrets:
  #     HELM_GH_USER: ${{ secrets.HELM_GH_USER }}
  #     HELM_GH_PASS: ${{ secrets.HELM_GH_PASS }}

  # deploy_enkinet:
  #   if: >
  #     ( github.event.inputs.ENVIRONMENT_NAME == 'enkinet' && github.event_name == 'workflow_dispatch' )
  #   uses: radixdlt/iac-resuable-artifacts/.github/workflows/deploy.yml@v0.7
  #   needs:
  #     - push-dashboard
  #     - push-storybook
  #     - setup-tags
  #   with:
  #     env_name: enkinet
  #     namespace:  dashboard-enkinet
  #     create_subns: false
  #     aws_region: eu-west-2
  #     role_to_assume: "arn:aws:iam::308190735829:role/gh-dashboard-dev-deployer"
  #     eks_cluster: rdx-works-main-dev
  #     helmfile_extra_vars: >-
  #       ci.tag=${{ fromJSON(needs.setup-tags.outputs.dashboard-json).labels['org.opencontainers.image.version'] }},
  #       ci.environment=enkinet
  #     environment: enkinet
  #   secrets:
  #     HELM_GH_USER: ${{ secrets.HELM_GH_USER }}
  #     HELM_GH_PASS: ${{ secrets.HELM_GH_PASS }}

  # deploy_hammunet:
  #   if: >
  #     ( github.event.inputs.ENVIRONMENT_NAME == 'hammunet' && github.event_name == 'workflow_dispatch' ) ||
  #     ( github.ref == 'refs/heads/main' )
  #   uses: radixdlt/iac-resuable-artifacts/.github/workflows/deploy.yml@v0.7
  #   needs:
  #     - push-dashboard
  #     - push-storybook
  #     - setup-tags
  #   with:
  #     env_name: hammunet
  #     namespace:  dashboard-hammunet
  #     create_subns: false
  #     aws_region: eu-west-2
  #     role_to_assume: "arn:aws:iam::308190735829:role/gh-dashboard-dev-deployer"
  #     eks_cluster: rdx-works-main-dev
  #     helmfile_extra_vars: >-
  #       ci.tag=${{ fromJSON(needs.setup-tags.outputs.dashboard-json).labels['org.opencontainers.image.version'] }},
  #       ci.environment=hammunet
  #     environment: hammunet
  #   secrets:
  #     HELM_GH_USER: ${{ secrets.HELM_GH_USER }}
  #     HELM_GH_PASS: ${{ secrets.HELM_GH_PASS }}

  # deploy_gilganet:
  #   if: >
  #     ( github.event.inputs.ENVIRONMENT_NAME == 'gilganet' && github.event_name == 'workflow_dispatch' )
  #   uses: radixdlt/iac-resuable-artifacts/.github/workflows/deploy.yml@v0.7
  #   needs:
  #     - push-dashboard
  #     - push-storybook
  #     - setup-tags
  #   with:
  #     env_name: gilganet
  #     namespace:  dashboard-gilganet
  #     create_subns: false
  #     aws_region: eu-west-2
  #     role_to_assume: "arn:aws:iam::308190735829:role/gh-dashboard-dev-deployer"
  #     eks_cluster: rdx-works-main-dev
  #     helmfile_extra_vars: >-
  #       ci.tag=${{ fromJSON(needs.setup-tags.outputs.dashboard-json).labels['org.opencontainers.image.version'] }},
  #       ci.environment=gilganet
  #     environment: gilganet
  #   secrets:
  #     HELM_GH_USER: ${{ secrets.HELM_GH_USER }}
  #     HELM_GH_PASS: ${{ secrets.HELM_GH_PASS }}

  # deploy_mardunet:
  #   if: >
  #     ( github.event.inputs.ENVIRONMENT_NAME == 'mardunet' && github.event_name == 'workflow_dispatch' )
  #   uses: radixdlt/iac-resuable-artifacts/.github/workflows/deploy.yml@v0.7
  #   needs:
  #     - push-dashboard
  #     - push-storybook
  #     - setup-tags
  #   with:
  #     env_name: mardunet
  #     namespace:  dashboard-mardunet
  #     create_subns: false
  #     aws_region: eu-west-2
  #     role_to_assume: "arn:aws:iam::308190735829:role/gh-dashboard-dev-deployer"
  #     eks_cluster: rdx-works-main-dev
  #     helmfile_extra_vars: >-
  #       ci.tag=${{ fromJSON(needs.setup-tags.outputs.dashboard-json).labels['org.opencontainers.image.version'] }},
  #       ci.environment=mardunet
  #     environment: mardunet
  #   secrets:
  #     HELM_GH_USER: ${{ secrets.HELM_GH_USER }}
  #     HELM_GH_PASS: ${{ secrets.HELM_GH_PASS }}

  # deploy_nebunet:
  #   if: github.event_name == 'release' && github.event.release.prerelease
  #   uses: radixdlt/iac-resuable-artifacts/.github/workflows/deploy.yml@v0.7
  #   needs:
  #     - push-dashboard
  #     - push-storybook
  #     - setup-tags
  #   with:
  #     env_name: nebunet
  #     namespace:  dashboard-nebunet
  #     create_subns: false
  #     aws_region: eu-west-2
  #     role_to_assume: "arn:aws:iam::308190735829:role/gh-dashboard-nebunet-deployer"
  #     eks_cluster: rdx-works-main-dev
  #     helmfile_extra_vars: >-
  #       ci.tag=${{ fromJSON(needs.setup-tags.outputs.dashboard-json).labels['org.opencontainers.image.version'] }},
  #       ci.environment=nebunet
  #     environment: nebunet
  #   secrets:
  #     HELM_GH_USER: ${{ secrets.HELM_GH_USER }}
  #     HELM_GH_PASS: ${{ secrets.HELM_GH_PASS }}

  # run-e2e-tests:
  #   runs-on: ubuntu-latest
  #   # needs:
  #   # - deploy_pull_request
  #   steps:
  #     - uses: actions/setup-node@v2
  #       with:
  #         always-auth: true
  #         node-version: 16.17.1
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - uses: ./.github/actions/build
  #       with: 
  #         npm_token: ${{ secrets.NPM_TOKEN }}
  #     - name: Run e2e tests on the PR environment
  #       uses: cypress-io/github-action@v4
  #       with:
  #         start: yarn dev
  #         wait-on: http://localhost:5173
