name: Migrations

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: 'Dashboard docker image'
        required: true
        type: string
        default: eu.gcr.io/dev-container-repo/dashboard:sha-7eca259
      environment_name:
        description: 'Environment Name'
        required: true
        default: enkinet
        type: choice
        options:
          - enkinet
          - hammunet
          - gilganet
          - mardunet
          - kisharnet
          - kisharnet-internal

env:
  secret_name: 'arn:aws:secretsmanager:eu-west-2:308190735829:secret:github-actions/rdxworks/dashboard/postgres-${{ github.event.inputs.environment_name }}'

jobs:
  run:
    name: Run migrations
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: read
      contents: read
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 0
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@158bbf4d6158a44a7e13f76295dc55a69e481a6e
      - name: Fetch postgres secrets
        uses: radixdlt/iac-resuable-artifacts/fetch-secrets@v0.8.0
        with:
          role_name: 'arn:aws:iam::308190735829:role/gh-dashboard-secrets-read-access'
          app_name: 'dashboard'
          step_name: 'migration'
          secret_prefix: 'GH'
          secret_name: ${{ env.secret_name }}
          parse_json: true
      - name: Debug
        run: env 
      - name: Configure AWS credentials for deployment
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.GH_ROLE_TO_ASSUME }}
          aws-region: ${{ env.GH_AWS_REGION }}
      - name: Install kubectl
        uses: azure/setup-kubectl@901a10e89ea615cf61f57ac05cecdf23e7de06d8 #v3.2
        with:
          version: "v1.25.6"
      - name: Get cluster info
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER --alias $EKS_CLUSTER
          kubectl config get-contexts
        env:
          AWS_REGION: ${{ env.GH_AWS_REGION }}
          EKS_CLUSTER: ${{ env.GH_EKS_CLUSTER }}
      - name: Run db migrations
        run: |
          cat <<DOC > job.yaml
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: db-migrations
          spec:
            template:
              spec:
                containers:
                - name: db-migrations
                  image: ${{ inputs.docker_image }}
                  command: ["/bin/sh", "-c", "-e"]
                  args:
                    - npx prisma migrate deploy --schema prisma/schema.prisma
                  env:
                    - name: DATABASE_URL
                      value: ${{ env.GH_DATABASE_URL }}
                restartPolicy: Never
                imagePullSecrets:
                - name: docker-eu-gcr-dev-api
            backoffLimit: 3
          DOC

          kubectl apply -f job.yaml -n $APP_NAMESPACE
          kubectl wait --for=condition=complete job/db-migrations --timeout=30s -n $APP_NAMESPACE
        env:
          APP_NAMESPACE: ${{ env.GH_APP_NAMESPACE }}
